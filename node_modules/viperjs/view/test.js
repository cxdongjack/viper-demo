include([
    '../../lib/all.js',
    '../../test/helper.js',
    'index.js',
]);

/* global _View__isProp */

{{#List(Class, text)}}
<ul>
    {{=View(Li, Class)(text)}}
</ul>
{{#}}

{{#Li(html)}}
    <li class="button">{{=html || ''}}</li>
{{#}}

describe('View', function() {
    function getView(onCreated, onClick) {
        var Class = function() {
            return {
                'created': onCreated,
                'click': onClick
            };
        };
        var $el = Test__getElement();
        View__init($el, List(Class));
        return $el.firstChild;
    }

    it('init', function() {
        var onCreated = jasmine.createSpy();
        var $el = getView(onCreated);
        expect($el.innerHTML).toMatch('vid=');
        expect(onCreated).toHaveBeenCalled();
    });

    it('events', function() {
        var onClick = jasmine.createSpy();
        var $el = getView(Function__nop, onClick);
        Dom__trigger($('.button', $el), 'click');
        expect(onClick).toHaveBeenCalled();
    });

    it('updated', function() {
        /* global _View__cache */
        window._View_id = 1000;
        var onCreated = function(view) {
            view.update('updated');
        };
        var $el = getView(onCreated);
        expect($el.innerHTML).toMatch('updated');
        expect(!!_View__cache.v1000).toBeTruthy();
        expect(!!_View__cache.v1001).toBeFalsy();
    });

});

{{#updateTpl(html, props)}}
<p class="button {{?props.case}}button_case{{?}}">{{=html || ''}}</p>
{{#}}

describe('View update', function() {
    var $el;


    beforeEach(function() {
        $el = Test__getElement();
    });

    function getCons() {
        return {};
    }

    function getView($parent) {
        var $node = $parent.firstChild;
        var id = $node.getAttribute('vid');
        return _View__cache[id];
    }

    it('prop as the last params for template', function() {
        Dom__setHtml($el, View(updateTpl, getCons)('item', View__createProp({
            case: true,
        })));
        var data = getView($el).data;
        expect(_View__isProp(data[1])).toBeTruthy();
        expect(data[1].case).toBeTruthy();
        expect(Array__has($el.firstChild.classList, 'button_case')).toBeTruthy();
    });

    it('has default prop', function() {
        Dom__setHtml($el, View(updateTpl, getCons, {
            prop: {
                case: true,
            },
        })('item'));
        var data = getView($el).data;
        expect(_View__isProp(data[1])).toBeTruthy();
        expect(data[1].case).toBeTruthy();
    });

    it('updates all params', function() {
        Dom__setHtml($el, View(updateTpl, getCons)('item', 'index'));
        var view = getView($el);
        view.update('item2', undefined, View__createProp({
            case: true,
        }));
        var data = view.data;
        expect(data[0]).toBe('item2');
        expect(data[1]).toBe('index');
        expect(_View__isProp(data[2])).toBeTruthy();
        expect(data[2].case).toBeTruthy();
    });

    it('updates states by dict', function() {
        Dom__setHtml($el, View(updateTpl, getCons)('item'));
        var view = getView($el);
        view.update({
            case: true,
            case_2: true,
        });
        var data = view.data;
        expect(data[0]).toBe('item');
        expect(data[1].case).toBeTruthy();
        expect(data[1].case_2).toBeTruthy();
    });

    it('updates props by pos array', function() {
        Dom__setHtml($el, View(updateTpl, getCons)('item'));
        var view = getView($el);
        view.update([
            1, View__createProp({ case: true }),
            0, 'item3',
        ]);
        var data = view.data;
        expect(data[0]).toBe('item3');
        expect(data[1].case).toBeTruthy();
    });
});

describe('View__className', function() {

    it('classNames', function() {
        var $el = Test__getElement();
        Dom__setHtml($el, View__className(Li, 'ttt')());
        expect($el.innerHTML).toMatch('class="button ttt"');
    });

});


include([
    '../../lib/all.js',
    '../dom-extend.js',
]);

/* global _Dom__initChildren */

/* exported View */
/* exported View__update */
/* exported View__bem */
/* exported View__init */
/* exported View__append */
/* exported View__className */
/* exported View__createProp */

var _View__cache;
var _View__eventTypeCache;
var _View_id = 0;

function _View__bindEvent(type) {
    // 避免绑定created
    _View__eventTypeCache = _View__eventTypeCache
        || { next: true };
    if (_View__eventTypeCache[type]) {
        return;
    }
    _View__eventTypeCache[type] = true;
    Dom__on(window, type, _View__eventHandler);
}

function _View__eventHandler(event) {
    var type = event.type;
    var target = event.target;
    // filter all type event handler from cache
    var events = [];
    Object__each(_View__cache, function(key, view) {
        var filtered = Array__filter(view.events, function(event) {
            return event.type == type;
        });
        filtered = Array__map(filtered, function(event) {
            return Object__extend({id: view.id}, event);
        });
        events = events.concat(filtered);
    });
    // intera all event cache
    Array__each(events, function(item) {
        var $item = _View__findTarget(target, item, events);
        if (!$item) {
            return;
        }
        _View__apply(item.listener, item.id, [event, $item]);
    });
}

function _View__findTarget($target, event, events) {
    var $elem = $target;
    var selector = _View__elemSelector(event);
    do {
        // 节点匹配
        if (Dom__is($elem, selector)) {
            return $elem;
        }

        // 阻止冒泡
        if (_View__isActionMatch($elem, events, 'stop')) {
            return null;
        }
    } while(($elem = $elem.parentElement));

    return null;
}

function _View__elemSelector(event) {
    return '[vid=' + event.id + '] ' + event.selector;
}

function _View__isActionMatch($elem, events, type) {
    return !!events.filter(function(e) {
        return Array__has(e.actions, type);
    }).filter(function(e) {
        return Dom__is($elem, _View__elemSelector(e));
    }).length;
}

function _View__apply(func, id, extra) {
    func.apply(this, [_View__cache[id]].concat(extra));
}

function _View__element(view) {
    return $('[vid=' + view.id + ']');
}

function _View__update(view) {
    var args = Array__slice(arguments, 1);
    var data = Array__slice(view.data);
    if (args.length == 1 && Object__isArray(args[0])) {
        // 参数是位置
        // [ pos1, value1, pos2, value2 ]
        args = args[0];

        // 取偶数个值
        var count = args.length / 2;
        Array__each(Array__range(0, count), function(item, index) {
            var pos = args[2 * index];
            var value = args[2 * index + 1];
            data[pos] = value;
        });
    } else if (args.length == 1 && Object__isPlainObject(args[0])) {
        // 参数是 prop 属性
        var prop = data[data.length - 1];
        Object__extend(prop, args[0]);
    } else {
        Array__each(args, function(item, index) {
            if (!Object__isUndefined(item)) {
                data[index] = item;
            }
        });
    }

    /* global _Dom__buildFragment */
    /* global mergeTree__merge */
    var $old = view.element();
    var $new = _Dom__buildFragment(
        View(view.template, view.constructor, view.options).apply(this, data))
        .children[0];
    merge.onRemove = onRemove;
    mergeTree__merge(merge, $old, $new);
    View__update($old);
    return;
    function merge($old, $new) {
        // TODO key判断，避免多余判断
        if ($old.nodeName != $new.nodeName) {
            replace($old, $new);
            return false;
        } else {
            copy($old, $new);
            return true;
        }
    }
    function onRemove($el) {
        var view = getView($el);
        view && (view.state = -1);
    }
    function replace($old, $new) {
        // 直接删除$old
        onRemove($old);
        Dom__replace($old, $new);
    }
    function copy($old, $new) {
        // 始终维持一个state, 0 0, 1 0, 0 1都不需要处理
        // 将新数据复制到旧节点上
        var oldView = getView($old);
        var newView = getView($new);
        onRemove($new);
        if (oldView && newView) {
            oldView.data = newView.data;

            // 旧节点的VID不变，使用uid 来记录更新
            // $old.setAttribute('uid', $new.getAttribute('vid'));
            $new.setAttribute('vid', $old.getAttribute('vid'));

            // 打点信息不变
            /* eslint-disable */
            try {
                $new.setAttribute(da__TARGET, $old.getAttribute(da__TARGET));
            } catch(e) {}
            /* eslint-enable */
        }
        Dom__copy($old, $new);
    }
    function getView($el) {
        var vid = $el.attributes && $el.getAttribute('vid');
        if (!vid) {
            return;
        }
        return _View__cache[vid];
    }
}


function View(template, constructor, options) {
    var view = {};
    Object__extend(view, {
        id: 'v' + _View_id++,
        template: template,
        constructor: constructor,
        data: null,
        events: [],
        options: options || {},
        state: 0, // 0: 准备插入， -1： 被废弃, 初始化完成 {}
        element: _View__element.bind(this, view),
        update: _View__update.bind(this, view)
    });
    view.self = function() {
        return _View__cache[view.id];
    };
    // 缓存整个view对象
    _View__cache = _View__cache || {};
    _View__cache[view.id] = view;
    // 准备所有事件
    Object__each(view.constructor(view), function(key, listener) {
        // click.stop@#test
        var map = key.split('@');
        var type = map[0].split('.')[0];
        var actions = map[0].split('.').slice(1);
        view.events.push({
            type : type,
            actions: actions,
            selector: map[1] || '',
            listener: listener
        });
        // 绑定事件
        _View__bindEvent(type);
    });
    return function() {
        var args = Array__slice(arguments, 0);
        var lastArg = args[args.length - 1];
        var defaultProp = view.options.prop || {};

        // 最后一个参数必须为View 的属性
        // 为View 设置默认属性
        if (!_View__isProp(lastArg)) {
            args = args.concat(View__createProp(defaultProp));
        } else {
            lastArg = Object__defaults(lastArg, defaultProp);
        }
        view.data = args;

        var template = view.template.apply(this, view.data);
        // 断言, 模板应该被包裹在一个节点内
        Util__assert(_Dom__buildFragment(template).children.length == 1,
            'view: your block should be wrapped in the element!',
            template);
        return template.replace(/(<[^>]*)(>)/, '$1 vid=' + view.id + '$2');
    };
}

function View__className(template, className) {
    return function() {
        return extendClass(template.apply(this, arguments), className);
    };
    function extendClass(template, classNames) {
        var reg = /(^\s*<[^>]* class=")(.*?)(")/;
        classNames = classNames.split(/\s+/);
        if (!classNames.length) {
            return template;
        }
        if (!reg.test(template)) {
            return template.replace(/(<[^>]*)(>)/, '$1 ' + 'class="' + classNames.join(' ') + '"$2');
        }
        return template.replace(reg, function(match, tagBegin, classText, tagEnd) {
            var internalClass = classText ? classText.split(/\s+/) : [];
            classNames = Array__uniq(internalClass.concat(classNames));
            return tagBegin + classNames.join(' ') + tagEnd;
        });
    }

}

function View__update($el, callback) {
    callback = callback || Function__nop;
    var nextFrameExecs = [];
    Object__each(_View__cache, function(key, view) {
        if (view.state === -1) {
            delete _View__cache[key];
            return;
        }

        if (view.state === 0) {
            view.state = {};

            // find created and apply
            var event = _View__findEvent(view, 'created');
            event && _View__apply(event.listener, view.id);

            // find nextFrame and queued
            var nextFrameEvent = _View__findEvent(view, 'next');
            if (nextFrameEvent) {
                nextFrameExecs.push(_View__apply.bind(this, nextFrameEvent.listener, view.id));
            }
            return;
        }
    });

    // 存在  next 方法时，延迟执行TAG；否则立即执行
    // 首次进入页面，执行update 时才会有next
    // view 更新时不会执行 next 方法
    if (nextFrameExecs.length) {
        Dom__onNextFrame(function() {
            nextFrameExecs.forEach(function(exec) {
                exec();
            });
            _View__initChildren($el);
            callback();
        });
    } else {
        _View__initChildren($el);
        callback();
    }
}

function _View__initChildren($el) {
    // 兼容 addTag 和 bem
    var $$children = $$('[data-dom-init]', $el);
    _Dom__initChildren($$children);
}

function _View__findEvent(view, type) {
    return Array__find(view.events, function(item) {
        return item.type == type;
    });
}

function View__init($el, html, callback) {
    $el.innerHTML = html;
    View__update($el, callback);
}

function View__bem() {
    var blocks = Array__slice(arguments);
    return View(bem(blocks), function() {
        // 触发_Dom__initChildren
        return {
            next: Function__nop,
        };
    });
}

function View__append($el, html) {
    $el.appendChild(_Dom__buildFragment(html));
}

function View__createProp(data) {
    if (!Object__isPlainObject(data)) {
        return console.error('View create prop is not an object!');
    }

    var prop = {
        __isProp__: true,
    };


    return Object__extend(prop, data, true);
}

function _View__isProp(prop) {
    return Object__isPlainObject(prop) && prop.__isProp__;
}

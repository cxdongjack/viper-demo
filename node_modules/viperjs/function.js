/* exported Function__nop */
function Function__nop() {}

/* exported Function__debounce */
function Function__debounce(func, wait) {
    var timer;

    return function() {
        var context = this,
            args = arguments;

        clearTimeout(timer);

        timer = setTimeout(function() {
            func.apply(context, args);
        }, wait);
    };
}

/* exported Function__throttle */
function Function__throttle(func, wait) {
    var context, args, result;
    var previous = 0;
    return function() {
        var now = new Date();
        var remaining = wait - (now - previous);
        context = this;
        args = arguments;
        if (remaining <= 0) {
            previous = now;
            result = func.apply(context, args);
        }
        return result;
    };
}

/* exported Function__once */
function Function__once(func) {
    var executed = false;

    return function() {
        if (!executed) {
            executed = true;
            func.apply(this, arguments);
        }
    };
}

/* exported Function__isFunction */
function Function__isFunction(o) {
    console.warn('deprecated! 请使用Object__isFunction');
    return Object__isFunction(o);
}

/* exported Function__aop */
function Function__aop(handler, before, after) {
    handler = handler || Function__nop;
    after = after || Function__nop;
    before = before || Function__nop;
    return function() {
        var event = {
            args: Array.prototype.slice.call(arguments, 0)
        };
        before.call(this, event);
        if (!event.stopped) {
            event.value = handler.apply(this, event.args);
            after.call(this, event);
        }
        return event.value;
    };
}

/* exported Function__curry */
function Function__curry(fn) {
    var args = Array__slice(arguments, 1);
    var curry = fn;
    Array__each(args, function(arg) {
        curry = curry.bind(undefined, arg);
    });
    return curry;
}

var _Function__globalKey = 'function' + ~~(Math.random() * 1e9),
    _Function__globalObject,
    _Function__globalId = 0;

/* exported Function__global */
function Function__global(func) {
    var callbackKey = 'global' + (++_Function__globalId);

    if (!_Function__globalObject) {
        _Function__globalObject = window[_Function__globalKey] = {};
    }

    _Function__globalObject[callbackKey] = func;

    return _Function__globalKey + '.' + callbackKey;
}

/* exported Function__global */
function function__getGlobal(callbackKey) {
    if (!_Function__globalObject) {
        return;
    }

    return _Function__globalObject[callbackKey];
}

/* exported Function__global */
function function__removeGlobal(callbackKey) {
    if (!_Function__globalObject) {
        return;
    }

    delete _Function__globalObject[callbackKey];
}

/*
 *  callback(index, fresh):   callback depends on history.state
 *      index: page index
 *      fresh: is new page?
 */
/* exported History__onPopState */
function History__onPopState(callback) {  // callback depends on History__getState
    var index = -1,
        session = Date.now(),
        indexSet = {},
        skipPopStateAfterLoad = false;

    function updateState(state) {
        var fresh = false;

        if (!state) {
            try {
                state = String__parseQuery(location.hash.substr(1));
            } catch (err) {
                state = {};
            }
        }

        if (state._index == undefined || state._session == undefined) {
            state._index = ++index;
            state._session = session;
            state._title = document.title;
            fresh = true;
        } else {
            index = state._index;
        }

        if (state._session != session) {
            if (indexSet[index]) {  // index冲突
                session = Date.now();
                indexSet = {};
            }

            state._session = session;
            fresh = true;
        }

        indexSet[index] = 1;

        if (fresh) {
            // 构造history.state
            // 如果当前URL不是通过pushState或者replaceState产生的，那么history.state是null
            history.replaceState(state, document.title);
        }

        // 兼容不支持history.state的浏览器，支持的浏览器这行无效。
        history.state = state;
        callback(History__getState(), state._title, index, fresh);
    }

    /*
     *  crbug.com/63040
     *  chrome33之前在load之后也会触发popstate，chrome34修复了这个问题。
     *  在chrome33上测试发现load事件里setTimeout会在popstate之后执行，
     *  利用这个可以过滤掉load事件之后的popstate事件。
     *
     *  模拟的第一次popstate事件延迟到load事件以后，
     *  因为load事件之前无法触发popstate事件。
     */
    Dom__on(window, 'popstate', function(e) {
        if (skipPopStateAfterLoad) {
            return;
        }

        updateState(e.state);
    });

    if (document.readyState == 'complete') {
        updateState(history.state);
    } else {
        Dom__on(window, 'load', function() {
            setTimeout(function() {
                skipPopStateAfterLoad = false;
            }, 0);

            updateState(history.state);
            skipPopStateAfterLoad = true;
        });
    }
}

function _History__clearState(state) {
    state = Object__extend({}, state, true);

    delete state._index;
    delete state._session;
    delete state._title;

    return state;
}

/* exported History__getState */
function History__getState() {
    return _History__clearState(history.state);
}

function _History__changeState(state, title, isReplace) {
    var oldState = history.state,
        url;

    if (!state) {
        state = oldState;
    } else if (oldState) {
        Object__extend(state, {
            _index: oldState._index,
            _session: oldState._session,
            _title: oldState._title,
        });
    }

    if (title != undefined) {
        document.title = state._title = title;
    }

    url = '#' + String__param(_History__clearState(state));
    (isReplace ? history.replaceState : history.pushState).call(history, state, document.title, url);
    history.state = state;
}

/* exported History__pushState */
function History__pushState(state, title) {
    _History__changeState(state, title, false);
}

/*
 * 如果只修改title，state可以传undefined
 */
/* exported History__replaceState */
function History__replaceState(state, title) {
    _History__changeState(state, title, true);
}

/*
 *  method:
 *      curr: 返回当前第几个
 *      $curr: 返回当前$page
 *      length: 返回总数
 *      go(to): 切到第几个
 *      add(): 新增一页，返回$page
 *      page(index): 返回第index个$page
 */
/* exported History__Page */
function History__Page($container, callback) {
    var $$children = $container.children,
        curr;

    callback = callback || Function__nop;

    function go(to) {
        if (to !== curr) {
            if (curr >= 0) {
                Dom__hide($$children[curr]);
            }

            curr = to;
            Dom__show($$children[curr]);
        }

        Dom__repaint($$children[curr]);
        callback(curr, $$children[curr]);
    }

    function add() {
        var $page = document.createElement('div');

        Dom__hide($page);
        $container.appendChild($page);

        return $page;
    }

    function page(index) {
        while (!$$children[index]) {
            add();
        }

        return $$children[index];
    }

    return (Dom__data($container).page = {
        get curr() {
            return curr;
        },
        get $curr() {
            return $$children[curr];
        },
        get length() {
            return $$children.length;
        },
        go: go,
        add: add,
        page: page,
    });
}

/*
 *  pageManager: 可以是History__Page或者Swipe__Swipe的实例
 *      page(index): 获取第index个页面，如果不存在则新建
 *      go(index, disableAnimate): 切到第index个页面
 *  render($page, state): 渲染新加载页面$page
 *  callback($page, state): 无论是否新加载都触发callback，可选
 */
/* exported History__onPage */
function History__onPage(pageManager, render, callback) {
    var $prev;

    callback = callback || Function__nop;

    History__onPopState(function(state, title, index, fresh) {
        var $curr = pageManager.page(index);

        if ($prev == $curr) {
            Dom__trigger($curr, 'page:popstate', state);
        } else {
            if ($prev) {
                Dom__trigger($prev, 'page:hide');
            }

            pageManager.go(index, !$prev);

            if (title != undefined) {
                document.title = title;
            }

            if (fresh) {
                render($curr, state);
            }

            Dom__trigger($curr, 'page:show', fresh);
            $prev = $curr;
            callback($curr, state);
        }
    });
}

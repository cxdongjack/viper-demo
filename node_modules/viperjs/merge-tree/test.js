include([
    '../../lib/all.js',
    '../../test/helper.js',
    'index.js',
    'opt.js'
]);

{{#TreeA()}}
<div data-dom-uid="1">
    <div data-dom-uid="1-1">
        <div data-dom-uid="1-1-1"></div>
        <div data-dom-uid="1-1-2"></div>
    </div>
    <div data-dom-uid="1-2"></div>
</div>
{{#}}

{{#TreeB()}}
<div data-dom-uid="1">
    <div data-dom-uid="2-1">
        <div data-dom-uid="2-1-1"></div>
        <div data-dom-uid="2-1-2"></div>
        <div data-dom-uid="2-1-3"></div>
    </div>
</div>
{{#}}

describe('diff 算法', function() {
    function getTree(tpl) {
        var $el = Test__getElement();
        Dom__setHtml($el, tpl());
        return $el.firstChild;
    }

    it('继续比对', function() {
        var treeA = getTree(TreeA);
        var treeB = getTree(TreeB);
        var merge = function() {
            return true;
        };
        mergeTree__merge(merge, treeA, treeB);
        expect(treeA.childElementCount).toBe(1);
        expect(treeA.firstElementChild.dataset.domUid).toBe('1-1');
        expect(treeA.firstElementChild.children[2].dataset.domUid).toBe('2-1-3');
    });

    it('DOM树合并算法', function() {
        var treeA = getTree(TreeA);
        var treeB = getTree(TreeB);
        var cmp = function($old, $new) {
            if ($old.nodeName != $new.nodeName) {
                Dom__replace($old, $new);
                return false;
            } else {
                Dom__copy($old, $new);
                return true;
            }
        };
        mergeTree__merge(cmp, treeA, treeB);
        expect(treeA.childElementCount).toBe(1);
        expect(treeA.firstElementChild.dataset.domUid).toBe('2-1');
    });

});

{{#ListA()}}
<ul>
    <li key="1"></li>
    <li key="2"></li>
    <li key="3"></li>
</ul>
{{#}}

{{#ListB()}}
<ul>
    <li key="2"></li>
    <li key="4"></li>
</ul>
{{#}}

describe('列表优化算法', function() {
    function getList(tpl) {
        var $el = Test__getElement();
        Dom__setHtml($el, tpl());
        return $el.firstChild;
    }

    it('优化列表的位置', function() {
        var a = getList(ListA);
        var b = getList(ListB);
        mergeTree__optList(a, b);
        expect(a.innerHTML).toMatch(/2.+4.+3/);
        expect(a.innerHTML).toMatch(/2.+4/);
    });

});


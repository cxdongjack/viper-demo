include([
    '../../lib/all.js',
    'opt.js'
]);

/* exported mergeTree__merge */
/* exported mergeTree__listKey */

function mergeTree__merge(merge, a, b, pA, pB) {
    var i, len, childrenA, childrenB;
    if (!a && !b) {
        return;
    }
    // 删除节点
    if (a && !b) {
        Dom__remove(a);
        merge.onRemove && merge.onRemove(a);
        return;
    }
    // 增加节点
    if (!a && b) {
        pA.appendChild(b);
        merge.append && merge.onAppend(b, pA);
        return;
    }
    // 合并节点，决定进一步比对并合并
    if (!merge(a, b, pA, pB)) {
        return;
    }

    // 如果children是列表，做一个优化，根据一个特定的属性, 先整理再合并
    mergeTree__optList(a, b);

    // 子节点比对
    childrenA = Array__slice(a.childNodes);
    childrenB = Array__slice(b.childNodes);
    len = Math.max(childrenA.length, childrenB.length);

    for(i = 0;i < len;i++) {
        mergeTree__merge(merge, childrenA[i], childrenB[i], a, b);
    }
}

/*
 * selector
 */

/* exported $ */
export function $(selector, $context) {
    return ($context === undefined ? document : $context).querySelector(selector);
}

/* exported $$ */
export function $$(selector, $context) {
    return ($context === undefined ? document : $context).querySelectorAll(selector);
}

/* exported is */
export function is($elem, selector) {
    return $elem.webkitMatchesSelector(selector);
}

/* exported closest */
export function closest($elem, selector, $context) {
    for ( ; $elem && $elem !== $context; $elem = $elem.parentElement) {
        if (is($elem, selector)) {
            return $elem;
        }
    }

    return null;
}

/*
 * event
 */

/* exported on */
export function on($elem, type, listener, useCapture) {
    $elem.addEventListener(type, listener, !!useCapture);
}

/* exported off */
export function off($elem, type, listener, useCapture) {
    $elem.removeEventListener(type, listener, !!useCapture);
}

/* exported trigger */
export function trigger($elem, type, data, noBubbles) {
    var event = document.createEvent('HTMLEvents');

    event.initEvent(type, !noBubbles, true);
    event.data = data;
    $elem.dispatchEvent(event);

    return event;
}

/*
 * classList
 */

/* exported hasClass */
export function hasClass($elem, className) {
    return $elem.classList.contains(className);
}

/* exported addClass */
export function addClass($elem, className) {
    $elem.classList.add(className);
}

/* exported removeClass */
export function removeClass($elem, className) {
    $elem.classList.remove(className);
}

/* exported toggleClass */
export function toggleClass($elem, className) {
    $elem.classList.toggle(className);
}

/*
 * utils
 */

var _dataStorageKey = 'domData' + ~~(Math.random() * 1e9),
    _dataStorage,
    _dataUid = 1;

/*
 *  把_dataStorage暴露到window上便于线上调试
 */
export function _initDataStorage() {
    if (!_dataStorage) {
        _dataStorage = window[_dataStorageKey] = {};
    }
}

/* exported data */
export function data($elem) {
    var uid = $elem == document ? 'document' : ($elem.dataset.domUid || ($elem.dataset.domUid = _dataUid++));

    _initDataStorage();

    return _dataStorage[uid] || (_dataStorage[uid] = {});
}

/* exported presetData */
export function presetData(data) {
    var ret;

    _initDataStorage();
    _dataStorage[_dataUid] = data;
    ret = 'data-dom-uid="' + _dataUid++ + '"';

    if (data.__init__) {
        ret += ' data-dom-init="1"';
    }

    if (data.__del__) {
        ret += ' data-dom-del="1"';
    }

    return ret;
}

export function _cleanData($elem) {
    var uid = $elem.dataset.domUid;

    if (uid && _dataStorage) {
        delete _dataStorage[uid];
    }
}

export function _cleanChildrenData($elem) {
    var $$children = $$('*', $elem),
        i;

    for (i = 0; i < $$children.length; i++) {
        _cleanData($$children[i]);
    }
}

export function _init($elem) {
    var data = data($elem),
        constructors = data.__init__,
        i;

    delete data.__init__;
    delete $elem.dataset.domInit;

    if (!constructors) {
        return;
    }

    for (i = 0; i < constructors.length; i++) {
        constructors[i]($elem);
    }
}

export function _initChildren($$children) {
    var total = $$children.length,
        i;

    // 逆序初始化，保证子节点总是比父节点更早初始化
    for (i = total - 1; i >= 0; i--) {
        _init($$children[i]);
    }
}


/* exported onDestroy */
export function onDestroy($elem, destructor) {
    var data = data($elem);

    data.__del__ = data.__del__ || [];
    data.__del__.push(destructor);
    $elem.dataset.domDel = 1;
}

export function _destroy($elem) {
    var destructors = data($elem).__del__,
        i;

    if (!destructors) {
        return;
    }

    i = destructors.length;

    while (i--) {
        destructors[i]($elem);
    }
}

export function _destroyChildren($elem) {
    var $$children = $$('[data-dom-del]', $elem),
        i = $$children.length;

    while (i--) {
        _destroy($$children[i]);
    }
}

/* exported remove */
export function remove($elem) {
    // 删除所有nodeType的节点
    if ($elem.nodeType != 1) {
        return detach($elem);
    }

    _destroyChildren($elem);

    if ($elem.dataset.domDel) {
        _destroy($elem);
    }

    _cleanChildrenData($elem);
    _cleanData($elem);
    detach($elem);
}

/* exported detach */
export function detach($elem) {
    if ($elem.parentNode) {
        $elem.parentNode.removeChild($elem);
    }
}

/* exported hide */
export function hide($elem) {
    $elem.style.display = 'none';
}

/* exported show */
export function show($elem) {
    $elem.style.display = '';
}

/* exported toggle */
export function toggle($elem) {
    $elem.style.display = $elem.style.display == 'none' ? '' : 'none';
}

/* exported repaint */
export function repaint($elem) {
    $elem.getBoundingClientRect();
}

/* exported inViewport */
export function inViewport($elem, threshold, viewportRect) {
    var rect = $elem.getBoundingClientRect();

    threshold = threshold || {};

    threshold = Object__extend({
        top: 0,
        bottom: 0,
        left: 0,
        right: 0,
    }, typeof threshold == 'number' ? {
        top: threshold,
        bottom: threshold,
        left: threshold,
        right: threshold,
    } : threshold);

    viewportRect = Object__extend({
        top: 0,
        bottom: window.innerHeight,
        left: 0,
        right: window.innerWidth,
    }, viewportRect);

    return  isVisible($elem) &&
            rect.width &&
            rect.height &&
            rect.bottom > viewportRect.top - threshold.top &&
            rect.right > viewportRect.left - threshold.left &&
            rect.top < viewportRect.bottom + threshold.bottom &&
            rect.left < viewportRect.right + threshold.right;
}

/* exported isHidden */
export function isHidden($elem) {
    var style;

    for ( ; $elem; $elem = $elem.parentElement) {
        style = getComputedStyle($elem);

        if (style.display == 'none' || style.visibility == 'hidden' || style.opacity == 0) {
            return true;
        }
    }

    return false;
}

/* exported isVisible */
export function isVisible($elem) {
    return !isHidden($elem);
}

/* exported getHtml */
export function getHtml($elem) {
    return $elem.innerHTML;
}

/* exported setHtml */
export function setHtml($elem, html) {
    var $$children;
    _destroyChildren($elem);
    _cleanChildrenData($elem);
    $elem.innerHTML = html;
    $$children = $$('[data-dom-init]', $elem);
    _initChildren($$children);
}

/* exported getText */
export function getText($elem) {
    return $elem.textContent;
}

/* exported setText */
export function setText($elem, text) {
    _destroyChildren($elem);
    _cleanChildrenData($elem);
    $elem.textContent = text;
}

export function _buildFragment(html) {
    var $range = document.createRange();

    $range.selectNode(document.body);
    var $frag = $range.createContextualFragment(html);

    if ($frag.children) {
        return $frag;
    }

    // IOS 8，frag 的 children 是 undefined
    var div = document.createElement('div');
    div.appendChild($frag);
    return div;
}

/* exported prependHtml */
export function prependHtml($elem, html) {
    var $fragment = _buildFragment(html),
        $$children = $$('[data-dom-init]', $fragment);

    $elem.insertBefore($fragment, $elem.firstChild);

    _initChildren($$children);
}

/* exported appendHtml */
export function appendHtml($elem, html) {
    var $fragment = _buildFragment(html),
        $$children = $$('[data-dom-init]', $fragment);

    $elem.appendChild($fragment);

    _initChildren($$children);
}

/* exported insertHtmlBefore */
export function insertHtmlBefore($elem, html) {
    var $fragment = _buildFragment(html),
        $$children = $$('[data-dom-init]', $fragment);

    $elem.parentNode.insertBefore($fragment, $elem);

    _initChildren($$children);
}

/* exported insertHtmlAfter */
export function insertHtmlAfter($elem, html) {
    var $fragment = _buildFragment(html),
        $$children = $$('[data-dom-init]', $fragment);

    $elem.parentNode.insertBefore($fragment, $elem.nextSibling);

    _initChildren($$children);
}

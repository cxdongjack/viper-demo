/**
 * 约定
 * 所有的异步方法callback参数总是在第一个
 * callback的第一个参数总是error
 *
 * inspired by https://github.com/azer/functools
 */
/* exported lambda__curry */
function lambda__curry(fn) {
    var args = Array__slice(arguments, 1),
        len = fn.length;
    return (function() {
        args = args.concat(Array__slice(arguments, 0));
        if (args.length >= len) {
            return fn.apply(null, args);
        } else {
            return arguments.callee;
        }
    })();
}

/* exported lambda__partial */
function lambda__partial(fn, initialArgs, reverse, ctx) {
    !initialArgs && (initialArgs = []);
    return function() {
        var args = Array__slice(arguments, 0);
        var finalArgs = reverse ? args.concat(initialArgs) : initialArgs.concat(args);
        return fn.apply(ctx, finalArgs);
    };
};

/* exported lambda__partialAsync */
function lambda__partialAsync(fn, initialArgs, ctx) {
    !initialArgs && (initialArgs = []);
    return function(callback) {
        var args = Array__slice(arguments, 1);
        return fn.apply(ctx, [callback].concat(initialArgs).concat(args));
    };
};

/* exported lambda__log */
function lambda__log(val) {
    console.log(val);
    return val;
}

/* exported lambda__asyncWrapper */
function lambda__asyncWrapper(func) {
    return function(callback) {
        var ret, error;
        ret = func();
        callback(ret === false, ret);
    }
}

/* exported lambda__logAsync */
function lambda__logAsync(callback) {
    console.log(Array__slice(arguments, 1));
    callback.apply(this, [null].concat(Array__slice(arguments, 1)));
}

/* exported lambda__compose */
function lambda__compose() {
    var fns = Array__slice(arguments, 0);
    return function() {
        var compose = Array__reduce(fns, function(f, g) {
            return function(val) {
                return g(f(val));
            };
        });
        return compose.apply(this, arguments);
    };
}

/* exported lambda__composeAsync */
function lambda__composeAsync(fns) {
    //var fns = Array__slice(arguments, 0);
    fns = arguments.length > 1 ? Array__slice(arguments, 0) : fns;
    return function(callback) {
        var args = Array__slice(arguments, 1);
        function compose(i, error) {
            var args = Array__slice(arguments, 2);
            var errorObj = null;
            if (error) {
                errorObj = errorObj || [];
                errorObj[i - 1] = {
                    fn : fns[i - 1],
                    error : error,
                    args : args
                };
            }
            if (error || fns.length <= i) {
                callback.apply(this, [errorObj].concat(args));
                return;
            }

            fns[i].apply(this, [compose.bind(this, i + 1)].concat(args));
        }
        compose.apply(this, [0, undefined].concat(args));
    };
}

/* exported lambda__concurrrent */
function lambda__concurrrent(fns) {
    fns = arguments.length > 1 ? Array__slice(arguments, 0) : fns;
    var len = fns.length;
    var results = [null];
    var temp = 0;
    return function(callback) {
        var args = Array__slice(arguments, 1);
        function onload(i, error) {
            var args = Array__slice(arguments, 2);
            results[i + 1] = args.length <= 1 ? args[0] : args;
            if (error) {
                results[0] = results[0] || [];
                results[0][i] = {
                    fn: fns[i],
                    error : error,
                    args : args
                };
            }
            temp++;
            if (temp >= len) {
                return callback.apply(this, results);
            }
        }
        fns.map(function(fn, i) {
            fn.apply(this, [onload.bind(this, i)].concat(args));
        });
    };
};

// console.warn('-------- lambda test ----------');

// function add(a, b) {
//     var c = 0;
//     if (this !== window) {
//         c = +this;
//     }
//     return a + b + c;
// }

// function addAsync(callback, a) {
//     if (a == 4) {
//         return callback(-1);
//     }
//     callback(null, a + 1);
// }

// // curry
// var curryTest = lambda__curry(add, 1);
// console.assert(curryTest (2) == 3, 'curryTest');

// partial
// var partialTest = lambda__partial(add, [1, 2], false, 3);
// console.assert(partialTest () == 6, 'partialTest');

// function divide(a, b, c) {
//     return a / (b * c);
// }

// var partiaReverselTest = lambda__partial(divide, [1, 2], false);
// console.assert(partiaReverselTest(3) == 1 / (2 * 3), 'partialReverseTest');
// partiaReverselTest = lambda__partial(divide, [1, 2], true);
// console.assert(partiaReverselTest(3) == 3 / (1 * 2), 'partialReverseTest');

// // compose
// // 1 + x
// var compose1 = lambda__curry(add, 1);
// // 5 + y
// var compose2 = lambda__curry(add, 5);
// // x + 1 + 5
// var composeTest = lambda__compose(compose1, lambda__log, compose2, lambda__log);
// console.assert(composeTest(0) == 6, 'composeTest');
// var composeAsyncTest = lambda__composeAsync(addAsync, lambda__logAsync, addAsync);

// // compose async
// composeAsyncTest(function(error, val) {
//     console.assert(val == 3, 'composeAsyncTest ok');
// }, 1);

// composeAsyncTest(function(error, val) {
//     console.assert(error[2].error == -1, 'composeAsyncTest fail');
// }, 3);


// // partial async
// var partialAsyncTest = lambda__partialAsync(addAsync, [1]);
// partialAsyncTest(function(error, val) {
//     console.assert(val == 2, 'partialAsyncTest ok');
// });

// var partialAsyncTest2 = lambda__partialAsync(addAsync, [4]);
// partialAsyncTest2(function(error, val) {
//     console.assert(error == -1, 'partialAsyncTest fail');
// });

// // concurrent
// var concurrent1 = lambda__partialAsync(addAsync, [1]);
// var concurrent2 = lambda__partialAsync(addAsync, [2]);
// var concurrent4 = lambda__partialAsync(addAsync, [4]);
// var concurrentTest = lambda__concurrrent(concurrent1, concurrent2);
// concurrentTest(function(error, ret1, ret2) {
//     console.assert(ret1 == 2, 'concurrentTest');
//     console.assert(ret2 == 3, 'concurrentTest');
// });

// var concurrentTest2 = lambda__concurrrent(concurrent4, concurrent1);
// concurrentTest2(function(error, ret4, ret1) {
//     console.assert(!ret4, 'concurrentTest');
//     console.assert(ret1 == 2, 'concurrentTest');
//     console.assert(error[0].fn == concurrent4, 'concurrentTest');
// });


// console.warn('-------- test over ----------');

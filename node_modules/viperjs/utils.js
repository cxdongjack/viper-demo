/* exported Utils__isChromium */
function Utils__isChromium() {
    /* http://erikcorry.blogspot.dk/2012/12/which-version-of-v8-do-i-have.html */
    //return !!window.indexedDB;
    //return parseInt('010') == 10;
    return /[@-A]/i.test('a');
}

/* exported Utils__isOldWebkit */
function Utils__isOldWebkit() {
    return !Utils__isChromium();
}

/* exported Utils__addOldWebkitClass */
function Utils__addOldWebkitClass() {
    if (Utils__isOldWebkit()) {
        Dom__addClass(document.documentElement, 'Old-webkit');
    }
}

/* exported Utils__isWifi */
function Utils__isWifi() {  // TODO test on chromium
    var connection = navigator.connection;

    return connection && connection.type == 2;
}

/* exported Utils__initRotate */
/*
function Utils__initRotate() {
    var lastWidth = window.innerWidth;

    Dom__on(window, 'resize', function() {
        var width = window.innerWidth;

        if (width != lastWidth) {
            lastWidth = width;
            setTimeout(function() {
                Dom__trigger(window, 'rotate', width);
            }, 100);
        }
    });
}
*/
function Utils__initRotate() {
    window.matchMedia('(width:' + window.innerWidth + 'px)').addListener(Utils__rotateUpdate);
}

/* exported Utils__rotateUpdate */
function Utils__rotateUpdate() {
    Dom__trigger(window, 'resize');
    Dom__trigger(window, 'rotate');
}

/*
 * location.reload(); 会去刷新cache，导致本来无需网络请求的资源需要304。
 * location.href = location.href; 如果包含'#'，不会重新加载，只是hashchange。
 * 所以去掉hash，把hash放到sessionStorage里，在Utils__initReload里读回来。
 */
/* exported Utils__reload */
function Utils__reload() {
    var tmp = location.href.split("#"),
        url = tmp[0],
        hash = tmp[1];

    if (hash) {
        sessionStorage.hash = hash;
    }

    location.replace(url);
}

/* exported Utils__initReload */
function Utils__initReload() {
    if (!location.hash && sessionStorage.hash) {
        history.replaceState(null, document.title, '#' + sessionStorage.hash);
        delete sessionStorage.hash;
    }
}

/* exported Utils__updateAppCache */
function Utils__updateAppCache(timeout, reload) {
    reload = reload || function() {
        location.reload();
    };

    if (applicationCache.status == applicationCache.UPDATEREADY) {
        reload();
    }

    Dom__on(applicationCache, 'updateready', reload);

    if (timeout) {
        setTimeout(function() {
            Dom__off(applicationCache, 'updateready', reload);
        }, timeout);
    }

}

/* exported Utils__insertJs */
function Utils__insertJs(js) {
    var $script = document.createElement('script');

    $script.appendChild(document.createTextNode(js));
    document.head.appendChild($script);
}

/* exported Utils__insertCss */
function Utils__insertCss(css, cdn) {
    var $style = document.createElement('style');

    if (cdn) {
        css = css.replace(/url\s*\(\s*(?!\w+:|\/\/)/g, 'url(' + cdn);
    }

    $style.appendChild(document.createTextNode(css));
    document.head.appendChild($style);
}

/* exported Utils__pixelPerfect */
function Utils__pixelPerfect(url) {
    var $img = document.createElement('img');

    $img.src = url;
    $img.style.position = 'fixed';
    $img.style.display = 'block';
    $img.style.left = 0;
    $img.style.top = 0;
    $img.style.width = '100%';
    $img.style.zIndex = 9999;
    $img.style.opacity = 0.85;
    $img.style.webkitClipPath = 'inset(0% 0% 0% 0%)';
    $img.style.pointerEvents = 'none';
    document.body.insertBefore($img, document.body.firstChild);

    Dom__on(document, 'scroll', function() {
        $img.style.top = '-' + document.body.scrollTop + 'px';
    });

    return $img;
}
